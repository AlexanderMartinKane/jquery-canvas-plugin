"use strict";function _classCallCheck(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}();if(!window.jQuery)throw new Error("Canvas requires jQuery");!function(t){t.fn.canvas=function(i){var e=function(){function i(e){var n=this;_classCallCheck(this,i),this.options=e,this.color=this.options.color,this.backColor=this.options.backColor,this.lineWidth=this.options.lineWidth,this.scroll=this.options.scroll,this.grid=this.options.grid,this.gridColor=this.options.gridColor,this.reflection=this.options.reflection,this.rotation=this.options.rotation,this.points=[],this.pointsX=[],this.pointsY=[],this.paint,this.timerId,this.canvas=t("<canvas>").css("cursor","pointer"),this.rotation?this.canvas=this.canvas.css("border-radius","50%")[0]:this.canvas=this.canvas[0],this.context=this.canvas.getContext("2d"),this.canvas.width=this.options.width,this.canvas.height=this.options.height,this.canvas.onmousedown=function(t){n.paint=!0;var i=n.getMousePos(t);n.createPoint(i.x,i.y,!1),n.draw()},this.canvas.onmousemove=function(t){if(n.paint){var i=n.getMousePos(t);n.createPoint(i.x,i.y,!0),n.draw()}},this.canvas.onmouseup=function(){return n.paint=!1},this.canvas.onmouseleave=function(){return n.paint=!1},this.canvas.onmousewheel=function(t){n.scroll&&(120===t.wheelDelta?(n.lineWidth+=1,n.update()):-120===t.wheelDelta&&(n.lineWidth-=1,n.update()))}}return _createClass(i,[{key:"createBackground",value:function(){this.context.beginPath(),this.context.rect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle=this.backColor,this.context.fill(),this.context.closePath(),this.grid&&this.createGrid()}},{key:"createGrid",value:function(){for(var t=0;t<360;t+=15)this.context.save(),this.context.translate(this.canvas.width/2,this.canvas.height/2),this.context.rotate(t*Math.PI/180),this.context.translate(-this.canvas.width/2,-this.canvas.height/2),this.context.beginPath(),this.context.moveTo(this.canvas.width/2,this.canvas.height/2),this.context.lineTo(this.canvas.width/2,-this.canvas.height/2),this.context.strokeStyle=this.gridColor,this.context.stroke(),this.context.closePath(),this.context.restore()}},{key:"connect",value:function(){this.context.strokeStyle=this.color,this.context.lineJoin="round",this.context.lineWidth=this.lineWidth;for(var t=0;t<this.points.length;t++)this.context.beginPath(),this.points[t]&&t?this.context.moveTo(this.pointsX[t-1],this.pointsY[t-1]):this.context.moveTo(this.pointsX[t]-1,this.pointsY[t]),this.context.lineTo(this.pointsX[t],this.pointsY[t]),this.context.stroke(),this.context.closePath()}},{key:"reflect",value:function(){this.context.save(),this.context.translate(this.canvas.width/2,this.canvas.height/2),this.context.scale(-1,1),this.context.translate(-this.canvas.width/2,-this.canvas.height/2),this.connect(),this.context.restore()}},{key:"draw",value:function(){for(var t=0;t<360;t+=30)this.context.save(),this.context.translate(this.canvas.width/2,this.canvas.height/2),this.context.rotate(t*Math.PI/180),this.context.translate(-this.canvas.width/2,-this.canvas.height/2),this.connect(),this.reflection&&this.reflect(),this.context.restore()}},{key:"rotate",value:function(t){this.context.translate(this.canvas.width/2,this.canvas.height/2),this.context.rotate(Math.PI/t),this.context.translate(-this.canvas.width/2,-this.canvas.height/2)}},{key:"clear",value:function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.points=[],this.pointsX=[],this.pointsY=[]}},{key:"update",value:function(i){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),"clear"!==i&&"reset"!==i||(this.points=[],this.pointsX=[],this.pointsY=[]),"reset"===i&&(this.color=this.options.color,this.backColor=this.options.backColor,this.lineWidth=this.options.lineWidth,this.scroll=this.options.scroll,this.grid=this.options.grid,this.gridColor=this.options.gridColor,this.reflection=this.options.reflection,this.rotation=this.options.rotation,t(n).find("input[name='color']").val(this.color),t(n).find("input[name='backColor']").val(this.backColor),t(n).find("input[name='grid']").prop("checked",this.grid),t(n).find("input[name='gridColor']").val(this.gridColor),t(n).find("input[name='reflection']").prop("checked",this.reflection),t(n).find("input[name='rotateAndDraw']").prop("checked",!1),t(n).find("input[name='drawAndRotate']").prop("checked",!1)),this.createBackground(),void 0===i&&this.draw()}},{key:"createPoint",value:function(t,i,e){this.pointsX.push(t),this.pointsY.push(i),this.points.push(e)}},{key:"getMousePos",value:function(t){var i=this.canvas.getBoundingClientRect();return{x:t.clientX-i.left,y:t.clientY-i.top}}}]),i}(),n="#"+t(this).attr("id"),o={width:600,height:600,lineWidth:1,scroll:!1,color:"#000000",backColor:"#ffffff",grid:!1,gridColor:"#ffffff",reflection:!0,rotation:!1},a=new e(t.extend({},o,i));t(n).append(a.canvas);var s=t("<div>");t("<label>").attr("for","color").text("Color").appendTo(s),t("<input>").attr({type:"color",name:"color",value:a.color}).on("input change",function(){a.color=t(this).val(),a.update()}).appendTo(s),t("<label>").attr("for","backColor").text("Background color").appendTo(s),t("<input>").attr({type:"color",name:"backColor",value:a.backColor}).on("input change",function(){a.backColor=t(this).val(),a.update()}).appendTo(s),t("<label>").attr("for","gridColor").text("Grid color").appendTo(s),t("<input>").attr({type:"color",name:"gridColor",value:a.gridColor}).on("input change",function(){a.gridColor=t(this).val(),a.update()}).appendTo(s);t(n).append(s);var r=t("<div>"),c=(t("<label>").attr("for","grid").text("Grid").appendTo(r),t("<input>").attr({type:"checkbox",name:"grid",id:"grid"}).prop("checked",a.grid).change(function(){this.checked?a.grid=!0:a.grid=!1,a.update()}).appendTo(r),t("<label>").attr("for","reflection").text("Reflection").appendTo(r),t("<input>").attr({type:"checkbox",name:"reflection",id:"reflection"}).prop("checked",a.reflection).change(function(){this.checked?a.reflection=!0:a.reflection=!1,a.update()}).appendTo(r),t("<label>").attr("for","rotateAndDraw").text("Rotate and draw").appendTo(r)),h=t("<input>").attr({type:"checkbox",name:"rotateAndDraw",id:"rotateAndDraw"}).prop("checked",!1).change(function(){this.checked?(clearInterval(a.timerId),t(n).find("input[name='drawAndRotate']").prop("checked",!1),a.timerId=setInterval(function(){a.rotate(1800),a.update()},10)):clearInterval(a.timerId)}).appendTo(r),l=t("<label>").attr("for","drawAndRotate").text("Draw and rotate").appendTo(r),d=t("<input>").attr({type:"checkbox",name:"drawAndRotate",id:"drawAndRotate"}).prop("checked",!1).change(function(){this.checked?(clearInterval(a.timerId),t(n).find("input[name='rotateAndDraw']").prop("checked",!1),a.timerId=setInterval(function(){a.rotate(1200)},50)):clearInterval(a.timerId)}).appendTo(r);t(n).append(r);var p=t("<div>");t("<button>").text("Reset").click(function(){clearInterval(a.timerId),a.update("reset")}).appendTo(p),t("<button>").text("Clear").click(function(){a.update("clear")}).appendTo(p),t("<button>").text("+").click(function(){a.lineWidth+=1,a.update()}).appendTo(p),t("<button>").text("-").click(function(){a.lineWidth-=1,a.update()}).appendTo(p),t("<button>").text("Save").click(function(){window.open(a.canvas.toDataURL(),"_blank")}).appendTo(p);return t(n).append(p),a.rotation||(c.hide(),h.hide(),l.hide(),d.hide()),a.createBackground(),this}}(window.jQuery);